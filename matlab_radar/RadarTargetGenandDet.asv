clear all
clc;

%% Radar Specifications 
%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Frequency of operation = 77GHz
% Max Range = 200m
% Range Resolution = 1 m
% Max Velocity = 100 m/s
%%%%%%%%%%%%%%%%%%%%%%%%%%%

c = 3e8; % in m/s 
freq = 77 * 10^6; %in GHZ
max_range = 200; % in m
range_res = 1; % in m
max_vel = 100; % in m/s

%speed of light = 3e8
%% User Defined Range and Velocity of target
% *%TODO* :
% define the target's initial position and velocity. Note : Velocity
% remains contant

initial_range = -100; 
init_velocity = -30; % in m/s
 
%% FMCW Waveform Generation

% *%TODO* :
%Design the FMCW waveform by giving the specs of each of its parameters.
% Calculate the Bandwidth (B), Chirp Time (Tchirp) and Slope (slope) of the FMCW
% chirp using the requirements above.
bandwidth = c / (2 * range_res); 
time_chirp = 5.5 * 2 * max_range / c; 
slope = bandwidth / time_chirp; 

%Operating carrier frequency of Radar 
fc= 77e9;             %carrier freq
                                                          
%The number of chirps in one sequence. Its ideal to have 2^ value for the ease of running the FFT
%for Doppler Estimation. 
Nd=128;                   % #of doppler cells OR #of sent periods % number of chirps

%The number of samples on each chirp. 
Nr=1024;                  %for length of time OR # of range cells

% Timestamp for running the displacement scenario for every sample on each
% chirp
t=linspace(0,Nd*time_chirp,Nr*Nd); %total time for samples


%Creating the vectors for Tx, Rx and Mix based on the total samples input.
Tx=zeros(1,length(t)); %transmitted signal
Rx=zeros(1,length(t)); %received signal
Mix = zeros(1,length(t)); %beat signal

%Similar vectors for range_covered and time delay.
r_t=zeros(1,length(t));
td=zeros(1,length(t));


%% Signal generation and Moving Target simulation
% Running the radar scenario over the time. 
for i=1:length(t)         
    
    
    % *%TODO* :
    %For each time stamp update the Range of the Target for constant velocity.
    
    r_t(i) = initial_range + init_velocity * t(i); 
    td(i) = 2 * r_t(i) / c; 
    
    % *%TODO* :
    %For each time sample we need update the transmitted and
    %received signal. 
    
    Tx(i) = cos(2 * pi * (freq * t(i) + (slope * (t(i) * t(i))) / 2));
    del_i = t(i) - td(i); 
    Rx(i) = cos(2 * pi * (freq * del_i + (slope * (del_i * del_i)) / 2));
    
    % *%TODO* :
    %Now by mixing the Transmit and Receive generate the beat signal
    %This is done by element wise matrix multiplication of Transmit and
    %Receiver Signal
    Mix(i) = Tx(i).*Rx(i); 
    
end

for i=1:L
    % *%TODO* :
    %For each time stamp update the Range of the Target for constant velocity. 
    range = R0 + t(i)*V;
    
    % *%TODO* :
    % For each time sample we need update the transmitted and received signal.
    % Delay tim td = 2R / c
    td    = 2*range / c;
    tnew  = t(i)-td;
    Tx(i) = cos( 2*pi*( fc*t(i) + (0.5*slope*t(i)^2) ) );
    Rx(i) = cos( 2*pi*( fc*tnew + (0.5*slope*tnew^2) ) );
    
    % *%TODO* :
    %Now by mixing the Transmit and Receive generate the beat signal
    %This is done by element wise matrix multiplication of Transmit and
    %Receiver Signal
    Mix(i) = Tx(i).*Rx(i);
end

%% RANGE MEASUREMENT


 % *%TODO* :
%reshape the vector into Nr*Nd array. Nr and Nd here would also define the size of
%Range and Doppler FFT respectively.

reshaped_Mix = reshape(Mix, [Nr, Nd]); 

 % *%TODO* :
%run the FFT on the beat signal along the range bins dimension (Nr) and
%normalize.
 % *%TODO* :
% Take the absolute value of FFT output
% *%TODO* :
% Output of FFT is double sided signal, but we are interested in only one side of the spectrum.
% Hence we throw out half of the samples.

L = length(reshaped_Mix); 
PMix = abs(fft(reshaped_Mix) / L); 
range_f = PMix(1: L / 2 + 1); 

%plotting the range
figure ('Name','Range from First FFT')
subplot(2,1,1)

 % *%TODO* :
 % plot FFT output 
f = Nr *(0:(L/2))/L;
plot(f, range_f)

 
axis ([0 200 0 1]);



%% RANGE DOPPLER RESPONSE
% The 2D FFT implementation is already provided here. This will run a 2DFFT
% on the mixed signal (beat signal) output and generate a range doppler
% map.You will implement CFAR on the generated RDM


% Range Doppler Map Generation.

% The output of the 2D FFT is an image that has reponse in the range and
% doppler FFT bins. So, it is important to convert the axis from bin sizes
% to range and doppler based on their Max values.

Mix=reshape(Mix,[Nr,Nd]);

% 2D FFT using the FFT size for both dimensions.
sig_fft2 = fft2(Mix,Nr,Nd);

% Taking just one side of signal from Range dimension.
sig_fft2 = sig_fft2(1:Nr/2,1:Nd);
sig_fft2 = fftshift (sig_fft2);
RDM = abs(sig_fft2);
RDM = 10*log10(RDM) ;

%use the surf function to plot the output of 2DFFT and to show axis in both
%dimensions
doppler_axis = linspace(-100,100,Nd);
range_axis = linspace(-200,200,Nr/2)*((Nr/2)/400);
figure,surf(doppler_axis,range_axis,RDM);

%% CFAR implementation

%Slide Window through the complete Range Doppler Map

% *%TODO* :
%Select the number of Training Cells in both the dimensions.
% *%TODO* :
%Select the number of Guard Cells in both dimensions around the Cell under 
%test (CUT) for accurate estimation
% *%TODO* :
% offset the threshold by SNR value in dB
TCR = 10; 
GCR = 4;

TCD = 8;
GCD = 4; 

db = 5; 



% *%TODO* :
%Create a vector to store noise_level for each iteration on training cells

%Get total number of training cells.
tot_TC = (2 * TCR + 2 * GCR + 1) * (2 * TCD + 2 * GCD + 1) - (2 * GCR + 1) * (2 * GCD + 1); 
noise_level = zeros(1, 1); 

% *%TODO* :
%design a loop such that it slides the CUT across range doppler map by
%giving margins at the edges for Training and Guard Cells.
%For every iteration sum the signal level within all the training
%cells. To sum convert the value from logarithmic to linear using db2pow
%function. Average the summed values for all of the training
%cells used. After averaging convert it back to logarithimic using pow2db.
%Further add the offset to it to determine the threshold. Next, compare the
%signal under CUT with this threshold. If the CUT level > threshold assign
%it a value of 1, else equate it to 0.


   % Use RDM[x,y] as the matrix from the output of 2D FFT for implementing
   % CFAR
tot_TC = (2 * TCR + 2 * GCR + 1) * (2 * TCD + 2 * GCD + 1) - (2 * GCR + 1) * (2 * GCD + 1);
Nr = height(RDM); 
Nd = width(RDM); 
for i = TCR + GCR + 1:(Nr - (TCR + GCR))
    for j = TCD + GCD + 1:(Nd - (TCD + GCD))
        %For every CUT Cell
        CUT_sum = zeros(1, 1); 
        for grid_i = i - (TCR + GCR): (2 * TCR + 2 * GCR)
            for grid_j = j - (TCD + GCD): (2 * TCD + 2 * GCD)
                if (grid_i > i + GCR || grid_i < i - GCR) && ... 
                        (grid_j > j + GCD || grid_j < j - GCD)
                    CUT_sum = CUT_sum + db2pow(RDM(grid_i, grid_j)); 
                end
            end 
         end 
         threshold = pow2db(CUT_sum / tot_TC) + db; 
         if RDM(i, j) > threshold
             RDM(i, j) = 1; 
         else
             RDM(i, j) = 0;    
         end     
    end
end 



% *%TODO* :
% The process above will generate a thresholded block, which is smaller 
%than the Range Doppler Map as the CUT cannot be located at the edges of
%matrix. Hence,few cells will not be thresholded. To keep the map size same
% set those values to 0. 
% for i = 1: Nr
%     for j = 1 : Nd
%         if RDM(i, j) ~= 0 || RDM(i, j) ~= 1
%             RDM(i, j) = 0; 
%         end
%     end
% end 


% *%TODO* :
%display the CFAR output using the Surf function like we did for Range
%Doppler Response output.
figure,surf(doppler_axis,range_axis,RDM);
colorbar;